{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","mail","id","className","src","alt","CardList","robots","robotCard","map","robot","i","email","style","marginTop","Search","searchChange","boxShadow","borderBottom","type","placeholder","onChange","Scroll","props","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","withEveryChange","event","searchfield","target","value","fetch","then","response","json","users","filtrador","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCPSC,EATF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAU,sDACX,yBAAMC,IAAG,+BAA0BF,GAAMG,IAAI,mBAC7C,4BAAKL,GACL,2BAAIC,KCMDK,EAVE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACVC,EAAYD,EAAOE,KAAK,SAACC,EAAOC,GAClC,OAAQ,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,KAAMM,EAAOI,GAAGC,WAE1E,OACA,yBAAKC,MAAO,CAACC,UAAW,QACpBN,ICIOO,EAXA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACb,OACI,yBAAKH,MAAO,CAACI,UAAW,8BAA+BC,aAAc,wBACjE,2BACAC,KAAK,SACLC,YAAY,gBACZC,SAAWL,MCERM,EARA,SAACC,GACZ,OACI,yBAAKV,MAAO,CAACW,UAAW,SAAWC,OAAQ,UACtCF,EAAMG,WCcJC,E,kDAhBX,WAAYJ,GAAO,IAAD,8BAClB,cAAMA,IACDK,MAAQ,CACbC,UAAU,GAHQ,E,8DAMJC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKT,MAAMG,a,GAdKQ,aC0CZC,G,wDApCX,aAAc,IAAD,8BACT,gBAUJC,gBAAkB,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAVzC,EAAKZ,MAAQ,CACTrB,OAAQ,GACR+B,YAAa,IAJR,E,gEAOO,IAAD,OACfG,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAGA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAAC1B,OAAQsC,S,+BAIjC,IAAD,EAC4Bb,KAAKJ,MAA7BrB,EADJ,EACIA,OAAQ+B,EADZ,EACYA,YACVQ,EAAYvC,EAAOwC,QAAO,SAAArC,GAC5B,OAAOA,EAAMV,KAAKgD,cAAcC,SAASX,EAAYU,kBAEzD,OAAKzC,EAAO2C,OAIJ,yBAAK/C,UAAW,MACZ,wBAAIA,UAAW,UAAf,eACA,kBAAC,EAAD,CAAQa,aAAgBgB,KAAKI,kBAC7B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,OAAUuC,OAR7B,wBAAI3C,UAAW,MAAf,kB,GArBD+B,cCDlBiB,IAASC,OAEL,kBAAC,EAAD,MAEDC,SAASC,eAAe,SPyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.899143a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ( {name, mail, id} ) =>{\r\n    return( \r\n        <div className=\"br2 pa2 ma2 bg-light-pink grow ba dib shadow-5 tc \">\r\n            <img  src={`https://robohash.org/${id}`} alt=\"Foto de Perfil\" />\r\n            <h2>{name}</h2>\r\n            <p>{mail}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ( {robots} ) =>{\r\n    const robotCard = robots.map( (robot, i) =>{\r\n        return  <Card id={robots[i].id} name={robots[i].name} mail={robots[i].email}/>; \r\n    });\r\n    return(\r\n    <div style={{marginTop: '3em'}}>\r\n       {robotCard}\r\n    </div>\r\n    )\r\n}\r\nexport default CardList; ","import React from 'react';\r\n\r\nconst Search = ({searchChange}) =>{\r\n    return(\r\n        <div style={{boxShadow: '0px 15px 15px 0px #0000007d', borderBottom: '1px solid #0000007d'}}>\r\n            <input \r\n            type=\"search\" \r\n            placeholder=\"find a friend\"\r\n            onChange= {searchChange}\r\n             />\r\n        </div>\r\n    );\r\n}\r\nexport default Search; \r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY: 'scroll' , height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll; ","import React, {Component} from 'react'; \r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n    super(props);\r\n    this.state = { \r\n    hasError: false\r\n    }\r\n}\r\ncomponentDidCatch(error, info){\r\n    this.setState({hasError: true})\r\n}\r\nrender(){\r\n    if(this.state.hasError){\r\n        return <h1>Ooop there is an issue...</h1>\r\n    }\r\n    return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundry;","import React, {Component} from \"react\"; \r\nimport CardList from '../components/CardList';\r\nimport Search from '../components/Search';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './app.css'; \r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [] , \r\n            searchfield: ''\r\n        }\r\n    };\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response =>response.json())\r\n        .then( users =>this.setState({robots: users}))}\r\n    withEveryChange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    render(){\r\n        const { robots, searchfield } = this.state; \r\n        const filtrador = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if (!robots.length){\r\n            return <h1 className= \"tc\">Loading...</h1>\r\n        }else{\r\n            return(\r\n                <div className= \"tc\">\r\n                    <h1 className= \"f1 dim\">RoboFriends</h1>\r\n                    <Search searchChange = {this.withEveryChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots = {filtrador}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default App; \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"; \nimport App from './containers/App';\nReactDOM.render(\n  \n    <App/>\n    \n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}